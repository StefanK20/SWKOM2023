/*
 * PaperlessREST
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing DocumentsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DocumentsApiTests : IDisposable
    {
        private DocumentsApi instance;

        public DocumentsApiTests()
        {
            instance = new DocumentsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DocumentsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' DocumentsApi
            //Assert.IsType<DocumentsApi>(instance);
        }

        /// <summary>
        /// Test DeleteDocument
        /// </summary>
        [Fact]
        public void DeleteDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //instance.DeleteDocument(id);
        }

        /// <summary>
        /// Test DownloadDocument
        /// </summary>
        [Fact]
        public void DownloadDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //bool? original = null;
            //instance.DownloadDocument(id, original);
        }

        /// <summary>
        /// Test GetDocumentMetadata
        /// </summary>
        [Fact]
        public void GetDocumentMetadataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //instance.GetDocumentMetadata(id);
        }

        /// <summary>
        /// Test GetDocumentPreview
        /// </summary>
        [Fact]
        public void GetDocumentPreviewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //instance.GetDocumentPreview(id);
        }

        /// <summary>
        /// Test GetDocumentThumb
        /// </summary>
        [Fact]
        public void GetDocumentThumbTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //instance.GetDocumentThumb(id);
        }

        /// <summary>
        /// Test GetDocuments
        /// </summary>
        [Fact]
        public void GetDocumentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? pageSize = null;
            //string? query = null;
            //string? ordering = null;
            //List<int>? tagsIdAll = null;
            //int? documentTypeId = null;
            //int? correspondentId = null;
            //bool? truncateContent = null;
            //instance.GetDocuments(page, pageSize, query, ordering, tagsIdAll, documentTypeId, correspondentId, truncateContent);
        }

        /// <summary>
        /// Test UpdateDocument
        /// </summary>
        [Fact]
        public void UpdateDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //Document? document = null;
            //instance.UpdateDocument(id, document);
        }

        /// <summary>
        /// Test UploadDocument
        /// </summary>
        [Fact]
        public void UploadDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? title = null;
            //DateTime? created = null;
            //int? documentType = null;
            //List<int>? tags = null;
            //int? correspondent = null;
            //List<System.IO.Stream>? document = null;
            //instance.UploadDocument(title, created, documentType, tags, correspondent, document);
        }
    }
}
